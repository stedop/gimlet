{"version":3,"sources":["bot.js"],"names":["Object","defineProperty","exports","value","_each2","require","_each3","_interopRequireDefault","_defaults2","_defaults3","_snoowrap","_snoowrap2","_xml2json","_xml2json2","_request","_request2","_fs","_fs2","obj","__esModule","default","bot","constructor","_ref","arguments","length","undefined","userAgent","clientId","clientSecret","refreshToken","subreddit","feedsFile","Error","subbreddit","feeds","completed","__initRedditClient","__initFeeds","redditClient","__writeFeeds","writeFile","JSON","stringify","err","makePost","_this","post","getSubreddit","submitLink","then","response","makeModPost","title","name","run","self","feed","url","error","body","statusCode","jsonResponse","parse","toJson","rss","channel","item","show","lastShow","Date","pubDate","enclosure"],"mappings":"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","file":"bot.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _each2 = require(\"lodash/each\");\n\nvar _each3 = _interopRequireDefault(_each2);\n\nvar _defaults2 = require(\"lodash/defaults\");\n\nvar _defaults3 = _interopRequireDefault(_defaults2);\n\nvar _snoowrap = require(\"snoowrap\");\n\nvar _snoowrap2 = _interopRequireDefault(_snoowrap);\n\nvar _xml2json = require(\"xml2json\");\n\nvar _xml2json2 = _interopRequireDefault(_xml2json);\n\nvar _request = require(\"request\");\n\nvar _request2 = _interopRequireDefault(_request);\n\nvar _fs = require(\"fs\");\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nclass bot {\n\n    /**\n     * @summary initialises the bot\n     *\n     * @param {string} [userAgent] A unique description of what your app does. This argument is not necessary when Snoowrap\n     is running in a browser.\n     * @param {string} [clientId] The client ID of your app (assigned by reddit)\n     * @param {string} [clientSecret] The client secret of your app (assigned by reddit). If you are using a refresh token\n     with an installed app (which does not have a client secret), pass an empty string as your `clientSecret`.\n     * @param {string} [refreshToken] A refresh token for your app.\n     * @param {string} [subreddit] The subreddit name we are going to be managing\n     */\n    constructor() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            userAgent = _ref.userAgent,\n            clientId = _ref.clientId,\n            clientSecret = _ref.clientSecret,\n            refreshToken = _ref.refreshToken,\n            subreddit = _ref.subreddit,\n            feedsFile = _ref.feedsFile;\n\n        if (clientId === undefined || clientSecret === undefined || refreshToken === undefined) {\n            throw new Error(\"Reddit Credentials not supplied\");\n        }\n\n        if (feedsFile === undefined) {\n            throw new Error(\"No feeds file deifned\");\n        }\n\n        (0, _defaults3.default)(this, {\n            userAgent,\n            clientId,\n            clientSecret,\n            refreshToken,\n            subreddit,\n            feedsFile\n        }, {\n            userAgent: null,\n            clientId: null,\n            clientSecret: null,\n            refreshToken: null,\n            subbreddit: null,\n            feedsFile: null\n        });\n\n        this.feeds = {};\n        this.completed = {};\n        this.__initRedditClient();\n        this.__initFeeds();\n    }\n\n    __initRedditClient() {\n        this.redditClient = new _snoowrap2.default({\n            userAgent: this.userAgent,\n            clientId: this.clientId,\n            clientSecret: this.clientSecret,\n            refreshToken: this.refreshToken\n        });\n    }\n\n    __initFeeds() {\n        this.feeds = require(this.feedsFile);\n    }\n\n    __writeFeeds() {\n        _fs2.default.writeFile(this.feedsFile, JSON.stringify(this.feeds), function (err) {\n            if (err) {\n                throw err;\n            }\n        });\n    }\n\n    makePost() {\n        var _this = this;\n\n        var post = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        return this.redditClient.getSubreddit(this.subreddit).submitLink(post).then(function (response) {\n            // according to the docs I should be able to chain this but it doesn't work\n            _this.makeModPost(response);\n            _this.completed[post.title] = response.name;\n        });\n    }\n\n    makeModPost() {}\n\n    run() {\n        var self = this;\n        (0, _each3.default)(this.feeds, function (feed, name) {\n            (0, _request2.default)(feed.url, function (error, response, body) {\n                if (!error && response.statusCode === 200) {\n                    var jsonResponse = JSON.parse(_xml2json2.default.toJson(body));\n                    (0, _each3.default)(jsonResponse.rss.channel.item, function (show) {\n                        var lastShow = new Date(feed.lastShow);\n                        var pubDate = new Date(show.pubDate);\n                        if (pubDate > lastShow) {\n                            var post = {\n                                'title': show.title,\n                                'url': show.enclosure.url\n                            };\n                            self.makePost(post);\n                            self.feeds[name].lastShow = show.pubDate;\n                            self.__writeFeeds();\n                        }\n                    });\n                } else {\n                    throw error;\n                }\n            });\n        });\n    }\n}\nexports.default = bot;\n//# sourceMappingURL=bot.js.map\n//# sourceMappingURL=bot.js.map"]}