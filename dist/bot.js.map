{"version":3,"sources":["bot.js"],"names":["Object","defineProperty","exports","value","_each2","require","_each3","_interopRequireDefault","_defaults2","_defaults3","_snoowrap","_snoowrap2","_xml2json","_xml2json2","_request","_request2","obj","__esModule","default","bot","constructor","_ref","arguments","length","undefined","userAgent","clientId","clientSecret","refreshToken","subreddit","feeds","Error","subbreddit","__initRedditClient","redditClient","httpGetAsync","theUrl","Promise","resolve","reject","error","response","body","statusCode","getFeeds","_this","data","responses","feed","name","url","then","jsonResponse","JSON","parse","toJson","rss","channel","parseFeeds","_this2","posts","item","show","lastShow","Date","pubDate","title","link","enclosure","postNewShows","self","completed","post","getSubreddit","submitLink","makeModPost","getSubmission","distinguish","approve","run","_this3"],"mappings":"AAAA;;AAEAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,WAAO;AADkC,CAA7C;;AAIA,IAAIC,SAASC,QAAQ,aAAR,CAAb;;AAEA,IAAIC,SAASC,uBAAuBH,MAAvB,CAAb;;AAEA,IAAII,aAAaH,QAAQ,iBAAR,CAAjB;;AAEA,IAAII,aAAaF,uBAAuBC,UAAvB,CAAjB;;AAEA,IAAIE,YAAYL,QAAQ,UAAR,CAAhB;;AAEA,IAAIM,aAAaJ,uBAAuBG,SAAvB,CAAjB;;AAEA,IAAIE,YAAYP,QAAQ,UAAR,CAAhB;;AAEA,IAAIQ,aAAaN,uBAAuBK,SAAvB,CAAjB;;AAEA,IAAIE,WAAWT,QAAQ,SAAR,CAAf;;AAEA,IAAIU,YAAYR,uBAAuBO,QAAvB,CAAhB;;AAEA,SAASP,sBAAT,CAAgCS,GAAhC,EAAqC;AACjC,WAAOA,OAAOA,IAAIC,UAAX,GAAwBD,GAAxB,GAA8B,EAAEE,SAASF,GAAX,EAArC;AACH;;AAED,MAAMG,GAAN,CAAU;;AAEN;;;;;;;;;;;;AAYAC,kBAAc;AACV,YAAIC,OAAOC,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,EAA/E;AAAA,YACIG,YAAYJ,KAAKI,SADrB;AAAA,YAEIC,WAAWL,KAAKK,QAFpB;AAAA,YAGIC,eAAeN,KAAKM,YAHxB;AAAA,YAIIC,eAAeP,KAAKO,YAJxB;AAAA,YAKIC,YAAYR,KAAKQ,SALrB;AAAA,YAMIC,QAAQT,KAAKS,KANjB;;AAQA,YAAIJ,aAAaF,SAAb,IAA0BG,iBAAiBH,SAA3C,IAAwDI,iBAAiBJ,SAA7E,EAAwF;AACpF,kBAAM,IAAIO,KAAJ,CAAU,iCAAV,CAAN;AACH;;AAED,YAAID,UAAUN,SAAV,IAAuBM,MAAMP,MAAN,KAAiB,CAA5C,EAA+C;AAC3C,kBAAM,IAAIQ,KAAJ,CAAU,mBAAV,CAAN;AACH;;AAED,SAAC,GAAGtB,WAAWS,OAAf,EAAwB,IAAxB,EAA8B;AAC1BO,qBAD0B;AAE1BC,oBAF0B;AAG1BC,wBAH0B;AAI1BC,wBAJ0B;AAK1BC,qBAL0B;AAM1BC;AAN0B,SAA9B,EAOG;AACCL,uBAAW,IADZ;AAECC,sBAAU,IAFX;AAGCC,0BAAc,IAHf;AAICC,0BAAc,IAJf;AAKCI,wBAAY,IALb;AAMCF,mBAAO;AANR,SAPH;;AAgBA,aAAKG,kBAAL;AACH;;AAEDA,yBAAqB;AACjB,aAAKC,YAAL,GAAoB,IAAIvB,WAAWO,OAAf,CAAuB;AACvCO,uBAAW,KAAKA,SADuB;AAEvCC,sBAAU,KAAKA,QAFwB;AAGvCC,0BAAc,KAAKA,YAHoB;AAIvCC,0BAAc,KAAKA;AAJoB,SAAvB,CAApB;AAMH;;AAEDO,iBAAaC,MAAb,EAAqB;AACjB,eAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1C,aAAC,GAAGxB,UAAUG,OAAd,EAAuBkB,MAAvB,EAA+B,UAAUI,KAAV,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiC;AAC5D,oBAAI,CAACF,KAAD,IAAUC,SAASE,UAAT,KAAwB,GAAtC,EAA2C;AACvCL,4BAAQI,IAAR;AACH;;AAEDH,uBAAOC,KAAP;AACH,aAND;AAOH,SARM,CAAP;AASH;;AAEDI,eAAW;AACP,YAAIC,QAAQ,IAAZ;;AAEA,YAAIC,OAAOxB,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,EAA/E;;AAEAwB,aAAKC,SAAL,GAAiB,EAAjB;AACA,eAAO,IAAIV,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1C,aAAC,GAAGjC,OAAOY,OAAX,EAAoB2B,MAAMf,KAA1B,EAAiC,UAAUkB,IAAV,EAAgBC,IAAhB,EAAsB;AACnDJ,sBAAMV,YAAN,CAAmBa,KAAKE,GAAxB,EAA6BC,IAA7B,CAAkC,UAAUV,QAAV,EAAoB;AAClD,wBAAIW,eAAeC,KAAKC,KAAL,CAAWzC,WAAWK,OAAX,CAAmBqC,MAAnB,CAA0Bd,QAA1B,CAAX,CAAnB;AACAK,yBAAKC,SAAL,CAAeE,IAAf,IAAuBG,aAAaI,GAAb,CAAiBC,OAAxC;AACAnB,4BAAQQ,IAAR;AACH,iBAJD,EAIGP,MAJH;AAKH,aAND;AAOH,SARM,CAAP;AASH;;AAEDmB,iBAAa;AACT,YAAIC,SAAS,IAAb;;AAEA,YAAIb,OAAOxB,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,EAA/E;;AAEAwB,aAAKc,KAAL,GAAa,EAAb;AACA,eAAO,IAAIvB,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1C,aAAC,GAAGjC,OAAOY,OAAX,EAAoB4B,KAAKC,SAAzB,EAAoC,UAAUN,QAAV,EAAoBQ,IAApB,EAA0B;AAC1D,iBAAC,GAAG3C,OAAOY,OAAX,EAAoBuB,SAASoB,IAA7B,EAAmC,UAAUC,IAAV,EAAgB;AAC/C,wBAAIC,WAAW,IAAIC,IAAJ,CAASL,OAAO7B,KAAP,CAAamB,IAAb,EAAmBc,QAA5B,CAAf;AACA,wBAAIE,UAAU,IAAID,IAAJ,CAASF,KAAKG,OAAd,CAAd;AACA,wBAAIA,UAAUF,QAAd,EAAwB;AACpBjB,6BAAKc,KAAL,CAAWX,IAAX,IAAmB;AACfiB,mCAAOzB,SAASyB,KAAT,GAAiB,KAAjB,GAAyBJ,KAAKI,KADtB;AAEfC,kCAAML,KAAKM,SAAL,CAAelB;AAFN,yBAAnB;AAIH;AACJ,iBATD;AAUH,aAXD;;AAaAZ,oBAAQQ,IAAR;AACH,SAfM,CAAP;AAgBH;;AAEDuB,mBAAe;AACX,YAAIvB,OAAOxB,UAAUC,MAAV,GAAmB,CAAnB,IAAwBD,UAAU,CAAV,MAAiBE,SAAzC,GAAqDF,UAAU,CAAV,CAArD,GAAoE,EAA/E;;AAEA,YAAIgD,OAAO,IAAX;AACA,YAAIC,YAAY,EAAhB;AACA,eAAO,IAAIlC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1C,aAAC,GAAGjC,OAAOY,OAAX,EAAoB4B,KAAKc,KAAzB,EAAgC,UAAUY,IAAV,EAAgBvB,IAAhB,EAAsB;AAClDqB,qBAAKpC,YAAL,CAAkBuC,YAAlB,CAA+BH,KAAKzC,SAApC,EAA+C6C,UAA/C,CAA0D;AACtDR,2BAAOM,KAAKN,KAD0C;AAEtDhB,yBAAKsB,KAAKL;AAF4C,iBAA1D,EAGGhB,IAHH,CAGQ,UAAUV,QAAV,EAAoB;AACxB;AACA6B,yBAAKK,WAAL,CAAiBlC,QAAjB;AACA8B,8BAAUC,KAAKN,KAAf,IAAwBzB,SAASQ,IAAjC;AACH,iBAPD,EAOGV,MAPH;AAQH,aATD;AAUAD,oBAAQiC,SAAR;AACH,SAZM,CAAP;AAaH;;AAEDI,gBAAYlC,QAAZ,EAAsB;AAClB,aAAKP,YAAL,CAAkB0C,aAAlB,CAAgCnC,QAAhC,EAA0CoC,WAA1C;AACA,aAAK3C,YAAL,CAAkB0C,aAAlB,CAAgCnC,QAAhC,EAA0CqC,OAA1C;AACH;;AAEDC,UAAM;AACF,YAAIC,SAAS,IAAb;;AAEA,eAAO,KAAKpC,QAAL,GAAgBO,IAAhB,CAAqB,UAAUL,IAAV,EAAgB;AACxC,mBAAOkC,OAAOtB,UAAP,CAAkBZ,IAAlB,CAAP;AACH,SAFM,EAEJK,IAFI,CAEC,UAAUL,IAAV,EAAgB;AACpB,mBAAOkC,OAAOtB,UAAP,CAAkBZ,IAAlB,CAAP;AACH,SAJM,EAIJK,IAJI,CAIC,UAAUL,IAAV,EAAgB;AACpB,mBAAOkC,OAAOX,YAAP,CAAoBvB,IAApB,CAAP;AACH,SANM,CAAP;AAOH;AAnJK;AAqJV5C,QAAQgB,OAAR,GAAkBC,GAAlB;AACA;AACA;AACA","file":"bot.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _each2 = require(\"lodash/each\");\n\nvar _each3 = _interopRequireDefault(_each2);\n\nvar _defaults2 = require(\"lodash/defaults\");\n\nvar _defaults3 = _interopRequireDefault(_defaults2);\n\nvar _snoowrap = require(\"snoowrap\");\n\nvar _snoowrap2 = _interopRequireDefault(_snoowrap);\n\nvar _xml2json = require(\"xml2json\");\n\nvar _xml2json2 = _interopRequireDefault(_xml2json);\n\nvar _request = require(\"request\");\n\nvar _request2 = _interopRequireDefault(_request);\n\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n\nclass bot {\n\n    /**\n     * @summary initialises the bot\n     *\n     * @param {string} [userAgent] A unique description of what your app does. This argument is not necessary when Snoowrap\n     is running in a browser.\n     * @param {string} [clientId] The client ID of your app (assigned by reddit)\n     * @param {string} [clientSecret] The client secret of your app (assigned by reddit). If you are using a refresh token\n     with an installed app (which does not have a client secret), pass an empty string as your `clientSecret`.\n     * @param {string} [refreshToken] A refresh token for your app.\n     * @param {string} [subreddit] The subreddit name we are going to be managing\n     * @param {object} [feeds] Onject containting list of xml feeds to parse\n     */\n    constructor() {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            userAgent = _ref.userAgent,\n            clientId = _ref.clientId,\n            clientSecret = _ref.clientSecret,\n            refreshToken = _ref.refreshToken,\n            subreddit = _ref.subreddit,\n            feeds = _ref.feeds;\n\n        if (clientId === undefined || clientSecret === undefined || refreshToken === undefined) {\n            throw new Error(\"Reddit Credentials not supplied\");\n        }\n\n        if (feeds === undefined || feeds.length === 0) {\n            throw new Error(\"No feeds to parse\");\n        }\n\n        (0, _defaults3.default)(this, {\n            userAgent,\n            clientId,\n            clientSecret,\n            refreshToken,\n            subreddit,\n            feeds\n        }, {\n            userAgent: null,\n            clientId: null,\n            clientSecret: null,\n            refreshToken: null,\n            subbreddit: null,\n            feeds: {}\n        });\n\n        this.__initRedditClient();\n    }\n\n    __initRedditClient() {\n        this.redditClient = new _snoowrap2.default({\n            userAgent: this.userAgent,\n            clientId: this.clientId,\n            clientSecret: this.clientSecret,\n            refreshToken: this.refreshToken\n        });\n    }\n\n    httpGetAsync(theUrl) {\n        return new Promise(function (resolve, reject) {\n            (0, _request2.default)(theUrl, function (error, response, body) {\n                if (!error && response.statusCode === 200) {\n                    resolve(body);\n                }\n\n                reject(error);\n            });\n        });\n    }\n\n    getFeeds() {\n        var _this = this;\n\n        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        data.responses = {};\n        return new Promise(function (resolve, reject) {\n            (0, _each3.default)(_this.feeds, function (feed, name) {\n                _this.httpGetAsync(feed.url).then(function (response) {\n                    var jsonResponse = JSON.parse(_xml2json2.default.toJson(response));\n                    data.responses[name] = jsonResponse.rss.channel;\n                    resolve(data);\n                }, reject);\n            });\n        });\n    }\n\n    parseFeeds() {\n        var _this2 = this;\n\n        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        data.posts = {};\n        return new Promise(function (resolve, reject) {\n            (0, _each3.default)(data.responses, function (response, name) {\n                (0, _each3.default)(response.item, function (show) {\n                    var lastShow = new Date(_this2.feeds[name].lastShow);\n                    var pubDate = new Date(show.pubDate);\n                    if (pubDate > lastShow) {\n                        data.posts[name] = {\n                            title: response.title + \" - \" + show.title,\n                            link: show.enclosure.url\n                        };\n                    }\n                });\n            });\n\n            resolve(data);\n        });\n    }\n\n    postNewShows() {\n        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var self = this;\n        var completed = {};\n        return new Promise(function (resolve, reject) {\n            (0, _each3.default)(data.posts, function (post, name) {\n                self.redditClient.getSubreddit(self.subreddit).submitLink({\n                    title: post.title,\n                    url: post.link\n                }).then(function (response) {\n                    // according to the docs I should be able to chain this but it doesn't work\n                    self.makeModPost(response);\n                    completed[post.title] = response.name;\n                }, reject);\n            });\n            resolve(completed);\n        });\n    }\n\n    makeModPost(response) {\n        this.redditClient.getSubmission(response).distinguish();\n        this.redditClient.getSubmission(response).approve();\n    }\n\n    run() {\n        var _this3 = this;\n\n        return this.getFeeds().then(function (data) {\n            return _this3.parseFeeds(data);\n        }).then(function (data) {\n            return _this3.parseFeeds(data);\n        }).then(function (data) {\n            return _this3.postNewShows(data);\n        });\n    }\n}\nexports.default = bot;\n//# sourceMappingURL=bot.js.map\n//# sourceMappingURL=bot.js.map\n//# sourceMappingURL=bot.js.map"]}